Index: main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.c b/main.c
--- a/main.c	
+++ b/main.c	(date 1652140942482)
@@ -14,7 +14,6 @@
 EDGE_LIST create_MST(EDGE_LIST edgeList);
 EDGE_LIST update_MST(EDGE_LIST edgeList);
 EDGE_LIST sort_by_edges(EDGE_LIST edgeList);
-int find_max_node(EDGE_LIST edgeList);
 void print_MST(EDGE_LIST edgeList);
 
 int main() {
@@ -34,7 +33,6 @@
             case 2:
                 //ADD EDGE FUNCTION
                 edgeList = update_MST(edgeList);
-
                 break;
             case 3:
                 print_MST(edgeList);
@@ -47,26 +45,24 @@
 
 
     return 0;
-}/*
-int find_max_node(EDGE_LIST edgeList){
-    int max = edgeList.data[0].w;
-    for (int i = 1; i < edgeList.n; ++i) {
-        if(max < edgeList.data[i].n1)
-            max = edgeList.data[i].n1;
-        if(max < edgeList.data[i].n2)
-            max = edgeList.data[i].n2;
-    }
-}*/
+}
+
 EDGE_LIST create_MST(EDGE_LIST edgeList){
     printf("Please enter amount of edges: ");
     scanf("%d",&edgeList.n);
     printf("Please enter amount of nodes: ");
     scanf("%d",&edgeList.max_node);
     printf("Please enter data of the edges: \n");
-    for (int i = 0; i < edgeList.n; ++i) {
-        //printf("Edge %d: ",i+1);
+    FILE *fp  = fopen("Sample_MST.txt", "r");
+    for (int i = 0; i < edgeList.n; i++) {
         scanf("%d %d %d",&edgeList.data[i].w, &edgeList.data[i].n1, &edgeList.data[i].n2);
+       /* while(fscanf(fp,"%d %d %d",&weight,&p1,&p2) == 3){
+            edgeList.data[i].w = weight;
+            edgeList.data[i].n1 = p1;
+            edgeList.data[i].n2 = p2;
+        }*/
     }
+    fclose(fp);
     return edgeList;
 }
 
@@ -106,12 +102,12 @@
 
 int search(int n,int parent_array[],int stack[],int mtr[][MAX],int *sp,int dest ,int src,int org_src,int max_weight_index,EDGE_LIST e){
    printf("src: %d sp : %d \n",src,*sp);
-    for(int i=1;i<=8;i++){
+    for(int i=1;i<=n;i++){
         printf("%d ",parent_array[i]);
     }
     printf("\n");
-    int counter = 0;
-    if(src == dest){
+    int counter = 0;  int temp;
+    if(src == dest ){
         return max_weight_index;
     }
     else{
@@ -124,18 +120,18 @@
         }
         if(counter == 0){
             src = parent_array[src];
-            if(src == org_src)
+            if(src == org_src){
                 return 0;
-            else
-                search(n,parent_array,stack,mtr,sp,dest,src,org_src,max_weight_index,e);
+            }
+            search(n,parent_array,stack,mtr,sp,dest,src,org_src,max_weight_index,e);
         }
         else{
-
+/*
             for(int i=0;i<n;i++){
                 printf(" %d ",stack[i]);
             }
-            printf("\n");
-            int temp;
+            printf("\n");*/
+
             temp = src;
             src = pop(stack,sp);
             if(mtr[temp][src] > e.data[max_weight_index].w)
@@ -144,7 +140,7 @@
         }
 
     }
-
+    return 0;
 }
 EDGE_LIST update_MST(EDGE_LIST edgeList){
     int max_weight_index= 0;
@@ -153,7 +149,7 @@
     int stack[MAX] = {0};
 
     printf("\n");
-    int j,flag;
+    int j;
     EDGE tmpEdge;
     printf("Please enter data of the node you want to add: \n");
     scanf("%d %d %d",&tmpEdge.w,&tmpEdge.n1,&tmpEdge.n2);
@@ -178,7 +174,7 @@
     visited[tmpEdge.n1] = tmpEdge.n1;
     max_weight_index = search(edgeList.max_node,visited,stack,mtr,sp,tmpEdge.n2,tmpEdge.n1,tmpEdge.n1,max_weight_index,edgeList);
     if(max_weight_index == 0){
-        for(i=0;i<8;i++){
+        for(i=0;i<=edgeList.max_node;i++){
             visited[i] = 0;
             stack[i] = 0;
         }
@@ -186,6 +182,7 @@
         *sp = 0;
         max_weight_index = search(edgeList.max_node,visited,stack,mtr,sp,tmpEdge.n1,tmpEdge.n2,tmpEdge.n2,max_weight_index,edgeList);
     }
+    printf("max: %d",max_weight_index);
 /*
     for(i=1;i<=edgeList.n;i++){
         printf("%d ",visited[i]);
